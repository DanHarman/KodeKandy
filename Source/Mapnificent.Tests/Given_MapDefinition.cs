using System.Security.Cryptography.X509Certificates;
using KodeKandy.Mapnificent.Tests.TestEntities;
using NUnit.Framework;

namespace KodeKandy.Mapnificent.Tests
{
    [TestFixture]
    public class Given_Auto_Generated_MapDefinition
    {
        [Test]
        public void When_()
        {
            // Arrange
            var sut = new Map(ProjectionType.Create<SimpleFrom, SimpleTo>());

            // Act

            // Assert
            // TODO: how to we check bindings for each field?
            // sut.GetMemberBindingDefinition()
        }

        [Test]
        public void When_Validating_AutoGenerated_Map_Then_Maps()
        {
            // Arrange
            var sut = new Map(ProjectionType.Create<SimpleFrom, SimpleTo>());
            var schema = new Mapper();

            // Act
            sut.Validate(schema);

            // Assert
        }
    }

    [TestFixture]
    public class Given_Auto_Generated_Map
    {
        [Test]
        public void When_Mapping_Simple_Class_Then_Maps()
        {
            // Arrange
            var sut = new Map(ProjectionType.Create<SimpleFrom, SimpleTo>());
            var from = new SimpleFrom() {Name = "Bob", Age = 20};
            var to = new SimpleTo();

            // Act
            sut.Apply(from, to, new Mapper());

            // Assert
            Assert.AreEqual(from.Name, to.Name);
            Assert.AreEqual(from.Age, to.Age);
        }

        [Test]
        public void When_Mapping_Flattening_Class_Then_Maps()
        {
            // Arrange
            var sut = new Map(ProjectionType.Create<FlatteningFrom, FlatteningTo>());
            var from = new FlatteningFrom { Child = new FlatteningFrom.FlatteningChildFrom { Name = "Bob" } };
            var to = new FlatteningTo();

            // Act
            sut.Apply(from, to, new Mapper());

            // Assert
            Assert.AreEqual(from.Child.Name, to.ChildName);
        }

        [Test]
        public void When_Mapping_Nested_Class_Then_Maps()
        {
            // Arrange
            var sut = new Map(ProjectionType.Create<NestedFrom, NestedTo>());
            var from = new NestedFrom { Child = new NestedFrom.NestedChildFrom { Name = "Bob" } };
            var to = new NestedTo { Child = new NestedTo.NestedChildTo() };

            // Act
            sut.Apply(from, to, new Mapper());

            // Assert
            Assert.AreEqual(from.Child.Name, to.Child.Name);
        }
    }
}