using System.Security.Cryptography.X509Certificates;
using KodeKandy.Mapnificent.Definitions;
using KodeKandy.Mapnificent.Maps;
using KodeKandy.Mapnificent.Tests.TestEntities;
using NUnit.Framework;

namespace KodeKandy.Mapnificent.Tests
{
    [TestFixture]
    public class Given_Auto_Generated_MapDefinition
    {
        [Test]
        public void When_()
        {
            // Arrange
            var sut = new MapDefinition(MappingType.Create<SimpleFrom, SimpleTo>());

            // Act

            // Assert
            // TODO: how to we check bindings for each field?
            // sut.GetMemberBindingDefinition()
        }

        [Test]
        public void When_Validating_AutoGenerated_Map_Then_Maps()
        {
            // Arrange
            var sut = new MapDefinition(MappingType.Create<SimpleFrom, SimpleTo>());
            var schema = new MapperSchema();

            // Act
            sut.Validate(schema);

            // Assert
        }
    }

    [TestFixture]
    public class Given_Auto_Generated_Map
    {
        [Test]
        public void When_Using_AutoGenerated_Map_Then_Maps()
        {
            // Arrange
            var definition = new MapDefinition(MappingType.Create<SimpleFrom, SimpleTo>());
            var sut = new Map(definition, new Mapper());
            var from = new SimpleFrom() {Name = "Bob", Age = 20};
            var to = new SimpleTo();

            // Act
            sut.Apply(from, to);

            // Assert
            Assert.AreEqual(from.Name, to.Name);
            Assert.AreEqual(from.Age, to.Age);
        }

        [Test]
        public void When_Flattening_Nested_Classes_Then_Maps()
        {
            // Arrange
            var definition = new MapDefinition(MappingType.Create<NestedFrom,NestedTo>());
            var sut = new Map(definition, new Mapper());
            var from = new NestedFrom { Child = new NestedFrom.NestedChildFrom { Name = "Bob" }};
            var to = new NestedTo();

            // Act
            sut.Apply(from, to);

            // Assert
            Assert.AreEqual(from.Child.Name, to.ChildName);
        }


    }
}